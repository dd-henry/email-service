# Define os estágios do pipeline.
# O pipeline será executado nesta ordem.
stages:
  - build
  - test
  - package

# Define a imagem Docker a ser usada para todos os jobs.
# Aqui usamos uma imagem oficial do OpenJDK 21.
image: openjdk:21-jdk-slim

# Define o cache para o Maven. Isso acelera as compilações subsequentes
# salvando as dependências baixadas.
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - .m2/repository
    - target/
  policy: pull-push

# --- Build Job ---
# Compila o projeto Spring Boot.
build:
  stage: build
  script:
    - echo "Iniciando a fase de build..."
    # Configura o cache do Maven.
    - chmod +x mvnw
    - ./mvnw clean package -DskipTests
  artifacts:
    # Salva o arquivo .jar gerado para ser usado em estágios futuros
    paths:
      - target/*.jar
    expire_in: 1 day

# --- Test Job ---
# Executa os testes de unidade e integração.
test:
  stage: test
  script:
    - echo "Iniciando a fase de testes..."
    - chmod +x mvnw
    - ./mvnw test

# --- Package Job ---
# Empacota o projeto em uma imagem Docker.
# Este estágio é opcional e depende se você quer usar Docker para seu deploy.
package:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Iniciando a fase de empacotamento da imagem Docker..."
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
  rules:
    # Este job só será executado quando uma tag for criada no Git,
    # indicando um lançamento oficial.
    - if: $CI_COMMIT_TAG